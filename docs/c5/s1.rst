.. _c5.1:

5.1 介绍
===========================================================
5.1 Introduction

.. tab:: 中文

.. tab:: 英文


Let’s quickly set the context for our study of the network control plane by recalling :ref:`Figures 4.2 <Figure 4.2>` and :ref:`4.3 <Figure 4.3>`. There, we saw that the forwarding table (in the case of ­destination-based forwarding) and the flow table (in the case of generalized forwarding) were the principal elements that linked the network layer’s data and control planes. We learned that these tables specify the local data-plane forwarding behavior of a router. We saw that in the case of generalized forwarding, the actions taken (:ref:`Section 4.4.2 <c4.4.2>`) could include not only forwarding a packet to a router’s output port, but also dropping a packet, replicating a packet, and/or rewriting layer 2, 3 or 4 packet-header fields.

In this chapter, we’ll study how those forwarding and flow tables are computed, maintained and installed. In our introduction to the network layer in :ref:`Section 4.1 <c4.1>`, we learned that there are two possible approaches for doing so.

- **Per-router control**. :ref:`Figure 5.1 <Figure 5.1>` illustrates the case where a routing algorithm runs in each and every router; both a forwarding and a routing function are contained within each router. Each router has a routing component that communicates with the routing components in other routers to compute the values for its forwarding table. This per-router control approach has been used in the Internet for decades. The OSPF and BGP protocols that we’ll study in :ref:`Sections 5.3 <c5.3>` and :ref:`5.4 <c5.4>` are based on this per-router approach to control.

  .. figure:: ../img/423-0.png 
     :align: center 
  
  .. _Figure 5.1:
  
  **Figure 5.1 Per-router control: Individual routing algorithm components interact in the control plane**

- **Logically centralized control**. :ref:`Figure 5.2 <Figure 5.2>` illustrates the case in which a logically centralized controller computes and distributes the forwarding tables to be used by each and every router. As we saw in :ref:`Section 4.4 <c4.4>`, the generalized match-plus-action abstraction allows the router to perform traditional IP forwarding as well as a rich set of other functions (load sharing, firewalling, and NAT) that had been previously implemented in separate middleboxes.

  .. figure:: ../img/424-0.png 
     :align: center 
  
  .. _Figure 5.2:
  
  **Figure 5.2 Logically centralized control: A distinct, typically remote, controller interacts with local control agents (CAs)**

The controller interacts with a control agent (CA) in each of the routers via a well-defined protocol to configure and manage that router’s flow table. Typically, the CA has minimum functionality; its job is to communicate with the controller, and to do as the controller commands. Unlike the routing algorithms in
:ref:`Figure 5.1 <Figure 5.1>`, the CAs do not directly interact with each other nor do they actively take part in computing the forwarding table. This is a key distinction between per-router control and logically centralized control.

By “logically centralized” control :ref:`[Levin 2012] <Levin 2012>` we mean that the routing control service is accessed as if it were a single central service point, even though the service is likely to be implemented via multiple servers for fault-tolerance, and performance scalability reasons. As we will see in Section 5.5, SDN adopts this notion of a logically centralized controller—an approach that is finding increased use in production deployments. Google uses SDN to control the routers in its internal B4 global wide-area network that interconnects its data centers :ref:`[Jain 2013] <Jain 2013>`. SWAN :ref:`[Hong 2013] <Hong 2013>`, from Microsoft Research, uses a logically centralized controller to manage routing and forwarding between a wide area network and a data center network. China Telecom and China Unicom are using SDN both within data centers and between data centers :ref:`[Li 2015] <Li 2015>`. AT&T has noted :ref:`[AT&T 2013] <AT&T 2013>` that it “supports many SDN capabilities and independently defined, proprietary mechanisms that fall under the SDN architectural framework.”